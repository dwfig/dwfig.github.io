
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { onMount, Bang, Switch, Patch } from '/js/core.js';
import { a as Label, F as Faceplate, L as Light } from './Light-6e622538.js';

function createCommonjsModule(fn) {
  var module = { exports: {} };
	return fn(module, module.exports), module.exports;
}

var helpers = createCommonjsModule(function (module, exports) {
exports.__esModule = true;
exports.safeName = exports.randomColor = exports.isShortcut = exports.round = exports.scale = void 0;
/**
 * Transform a value between two ranges
 * @param value - Current value
 * @param from - [min, max] current value range
 * @param to -  [min, max] target value range
 * @param precision - scaled value decimal places precision
 *
 * @example
 * // scale a value
 * const scaledValue = scale(originalValue, [0, 100], [25, 50], 2);
 *
 * @category Helpers
 */
var scale = function (value, from, to, precision) {
    if (precision === void 0) { precision = 2; }
    var scaled = (to[1] - to[0]) / (from[1] - from[0]);
    var capped = Math.min(from[1], Math.max(from[0], value)) - from[0];
    return exports.round(capped * scaled + to[0], precision);
};
exports.scale = scale;
/**
 * Round a number with specific decimal places precision
 *
 * @example
 * const freq = round(420.240);
 *
 * @category Helpers
 */
var round = function (value, precision) {
    if (precision === void 0) { precision = 0; }
    var p = Math.pow(10, precision);
    var m = value * p * (1 + Number.EPSILON);
    return Math.round(m) / p;
};
exports.round = round;
/**
 * Check if a keyboard event can be intercepted as a shortcut
 *
 * @example
 * // skip processing a keyboard event if definately not a shortcut
 * const onKeyDown = (e: KeyboardEvent) => {
 *    if(!isShortcut()){
 *        return true;
 *    }
 * }
 *
 * @category Helpers
 */
var isShortcut = function (e) {
    var tagName = e.target.tagName.toLowerCase();
    return ['input', 'textarea'].indexOf(tagName) < 0;
};
exports.isShortcut = isShortcut;
/**
 * Retruns a random color hex code from a predefined list
 *
 * @example
 * const color = randomColor()
 *
 * @category Helpers
 */
var randomColor = function () {
    var colors = ['#E6EB74', '#98D2DE', '#8ACB74', '#DC4846'];
    return colors[Math.floor(Math.random() * colors.length)];
};
exports.randomColor = randomColor;
/**
 * Convert module title name to a safe file name
 *
 * @example
 * const fileName = safeName(input);
 *
 * @category Helpers
 */
var safeName = function (name) {
    return name.replace(/[^a-z0-9_-]/gi, '_').toLowerCase();
};
exports.safeName = safeName;
});

/* ../core/src/components/Knob.svelte generated by Svelte v3.31.2 */

function add_css() {
	var style = __sv.element("style");
	style.id = "svelte-7v2dn-style";
	style.textContent = "div.svelte-7v2dn{display:block;position:absolute;width:56px;height:56px;cursor:row-resize}div.small.svelte-7v2dn{width:42px;height:42px}svg.svelte-7v2dn{position:absolute;top:0px;left:0px;transform-origin:center}.shadow-l.svelte-7v2dn{top:4px;left:2px}.shadow-s.svelte-7v2dn{top:3px;left:3px}";
	__sv.append(document.head, style);
}

// (133:4) {:else}
function create_else_block(ctx) {
	let svg0;
	let path0;
	let t0;
	let svg1;
	let path1;
	let circle0;
	let circle1;
	let circle2;
	let t1;
	let if_block_anchor;
	let current;
	let if_block = /*label*/ ctx[2] && create_if_block_3(ctx);

	return {
		c() {
			svg0 = __sv.svg_element("svg");
			path0 = __sv.svg_element("path");
			t0 = __sv.space();
			svg1 = __sv.svg_element("svg");
			path1 = __sv.svg_element("path");
			circle0 = __sv.svg_element("circle");
			circle1 = __sv.svg_element("circle");
			circle2 = __sv.svg_element("circle");
			t1 = __sv.space();
			if (if_block) if_block.c();
			if_block_anchor = __sv.empty();
			__sv.attr(path0, "d", "M56 29.649c-1.653-1.825-2.876-4.088-3.307-6.57-.503-2.555-.36-5.037.431-7.446a25.97 25.97 0\n          00-6.613-8.686c-2.372.146-4.888-.292-7.189-1.46-2.3-1.168-4.17-2.92-5.535-4.89-3.666-.73-7.333-.804-10.783-.147a13.958\n          13.958 0 01-5.607 4.818c-2.3 1.095-4.817 1.533-7.26 1.241-2.733 2.263-5.105 5.183-6.83 8.467.647 2.336.79\n          4.891.287 7.446-.647 2.555-1.869 4.745-3.594 6.497.072 3.722.79 7.372 2.228 10.657 2.229.876 4.242 2.336 5.895\n          4.526 1.582 2.044 2.516 4.525 2.876 6.861 2.875 2.19 6.038 3.87 9.704 4.891 2.085-1.168 4.53-1.898 7.117-1.898\n          2.588 0 4.96.73 7.117 2.044 3.45-.803 6.83-2.409 9.777-4.672.431-2.409 1.366-4.744 3.019-6.788 1.653-2.044\n          3.738-3.431 6.039-4.307.718-1.606 1.365-3.358 1.797-5.183.215-1.606.36-3.576.431-5.401z");
			__sv.attr(path0, "fill", "var(--color-dark-shadow)");
			__sv.set_style(svg0, "transform", "rotate(" + (-135 + /*rotation*/ ctx[5]) + "deg)");
			__sv.attr(svg0, "class", "shadow-l svelte-7v2dn");
			__sv.attr(svg0, "width", "56");
			__sv.attr(svg0, "height", "56");
			__sv.attr(svg0, "fill", "none");
			__sv.attr(svg0, "xmlns", "http://www.w3.org/2000/svg");
			__sv.attr(path1, "d", "M56 29.649c-1.653-1.825-2.876-4.088-3.307-6.57-.503-2.555-.36-5.037.431-7.446a25.97 25.97 0\n          00-6.613-8.686c-2.372.146-4.888-.292-7.189-1.46-2.3-1.168-4.17-2.92-5.535-4.89-3.666-.73-7.333-.804-10.783-.147a13.958\n          13.958 0 01-5.607 4.818c-2.3 1.095-4.817 1.533-7.26 1.241-2.733 2.263-5.105 5.183-6.83 8.467.647 2.336.79\n          4.891.287 7.446-.647 2.555-1.869 4.745-3.594 6.497.072 3.722.79 7.372 2.228 10.657 2.229.876 4.242 2.336 5.895\n          4.526 1.582 2.044 2.516 4.525 2.876 6.861 2.875 2.19 6.038 3.87 9.704 4.891 2.085-1.168 4.53-1.898 7.117-1.898\n          2.588 0 4.96.73 7.117 2.044 3.45-.803 6.83-2.409 9.777-4.672.431-2.409 1.366-4.744 3.019-6.788 1.653-2.044\n          3.738-3.431 6.039-4.307.718-1.606 1.365-3.358 1.797-5.183.215-1.606.36-3.576.431-5.401z");
			__sv.attr(path1, "fill", "var(--color-6)");
			__sv.attr(circle0, "cx", "28");
			__sv.attr(circle0, "cy", "28");
			__sv.attr(circle0, "r", "17");
			__sv.attr(circle0, "fill", "var(--color-light-shadow)");
			__sv.attr(circle1, "cx", "28");
			__sv.attr(circle1, "cy", "28");
			__sv.attr(circle1, "r", "14");
			__sv.attr(circle1, "fill", "var(--color-light)");
			__sv.attr(circle2, "cx", "28");
			__sv.attr(circle2, "cy", "5");
			__sv.attr(circle2, "fill", "var(--color-light)");
			__sv.attr(circle2, "r", "2");
			__sv.set_style(svg1, "transform", "rotate(" + (-135 + /*rotation*/ ctx[5]) + "deg)");
			__sv.attr(svg1, "width", "56");
			__sv.attr(svg1, "height", "56");
			__sv.attr(svg1, "fill", "none");
			__sv.attr(svg1, "xmlns", "http://www.w3.org/2000/svg");
			__sv.attr(svg1, "class", "svelte-7v2dn");
		},
		m(target, anchor) {
			__sv.insert(target, svg0, anchor);
			__sv.append(svg0, path0);
			__sv.insert(target, t0, anchor);
			__sv.insert(target, svg1, anchor);
			__sv.append(svg1, path1);
			__sv.append(svg1, circle0);
			__sv.append(svg1, circle1);
			__sv.append(svg1, circle2);
			__sv.insert(target, t1, anchor);
			if (if_block) if_block.m(target, anchor);
			__sv.insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty & /*rotation*/ 32) {
				__sv.set_style(svg0, "transform", "rotate(" + (-135 + /*rotation*/ ctx[5]) + "deg)");
			}

			if (!current || dirty & /*rotation*/ 32) {
				__sv.set_style(svg1, "transform", "rotate(" + (-135 + /*rotation*/ ctx[5]) + "deg)");
			}

			if (/*label*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*label*/ 4) {
						__sv.transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_3(ctx);
					if_block.c();
					__sv.transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				__sv.group_outros();

				__sv.transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				__sv.check_outros();
			}
		},
		i(local) {
			if (current) return;
			__sv.transition_in(if_block);
			current = true;
		},
		o(local) {
			__sv.transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) __sv.detach(svg0);
			if (detaching) __sv.detach(t0);
			if (detaching) __sv.detach(svg1);
			if (detaching) __sv.detach(t1);
			if (if_block) if_block.d(detaching);
			if (detaching) __sv.detach(if_block_anchor);
		}
	};
}

// (95:4) {#if size === 's'}
function create_if_block_1(ctx) {
	let svg0;
	let circle0;
	let t0;
	let svg1;
	let circle1;
	let circle2;
	let circle3;
	let t1;
	let svg2;
	let path;
	let t2;
	let if_block_anchor;
	let current;
	let if_block = /*label*/ ctx[2] && create_if_block_2(ctx);

	return {
		c() {
			svg0 = __sv.svg_element("svg");
			circle0 = __sv.svg_element("circle");
			t0 = __sv.space();
			svg1 = __sv.svg_element("svg");
			circle1 = __sv.svg_element("circle");
			circle2 = __sv.svg_element("circle");
			circle3 = __sv.svg_element("circle");
			t1 = __sv.space();
			svg2 = __sv.svg_element("svg");
			path = __sv.svg_element("path");
			t2 = __sv.space();
			if (if_block) if_block.c();
			if_block_anchor = __sv.empty();
			__sv.attr(circle0, "cx", "21");
			__sv.attr(circle0, "cy", "21");
			__sv.attr(circle0, "r", "13");
			__sv.attr(circle0, "fill", "rgba(0,0,0,0.16)");
			__sv.attr(svg0, "class", "shadow-s svelte-7v2dn");
			__sv.attr(svg0, "width", "42");
			__sv.attr(svg0, "height", "42");
			__sv.attr(svg0, "fill", "none");
			__sv.attr(svg0, "xmlns", "http://www.w3.org/2000/svg");
			__sv.attr(circle1, "cx", "21");
			__sv.attr(circle1, "cy", "21");
			__sv.attr(circle1, "r", "13");
			__sv.attr(circle1, "fill", "var(--color-light-shadow)");
			__sv.attr(circle2, "cx", "21");
			__sv.attr(circle2, "cy", "21");
			__sv.attr(circle2, "r", "11");
			__sv.attr(circle2, "fill", "var(--color-light)");
			__sv.attr(circle3, "cx", "21");
			__sv.attr(circle3, "cy", "12");
			__sv.attr(circle3, "r", "2");
			__sv.attr(circle3, "fill", "var(--color-6)");
			__sv.set_style(svg1, "transform", "rotate(" + (-135 + /*rotation*/ ctx[5]) + "deg)");
			__sv.attr(svg1, "width", "42");
			__sv.attr(svg1, "height", "42");
			__sv.attr(svg1, "fill", "none");
			__sv.attr(svg1, "xmlns", "http://www.w3.org/2000/svg");
			__sv.attr(svg1, "class", "svelte-7v2dn");
			__sv.attr(path, "d", "M41.993 21.551l-3-.077a18.203 18.203 0 000-.948l3-.077a21.497 21.497 0 010\n          1.102zm-.853-6.518l-2.877.851c-.089-.301-.186-.6-.29-.895l2.828-1.001c.122.344.235.693.34\n          1.045zm-2.832-5.928a21.009 21.009 0 00-.647-.89l-2.378\n          1.829c.191.249.376.503.554.762l2.471-1.701zm-4.523-4.766l-1.828\n          2.378c-.25-.191-.504-.376-.763-.555l1.701-2.47c.303.208.599.423.89.647zm-5.773-3.14l-1.001 2.828a17.8 17.8 0\n          00-.895-.29l.85-2.877c.353.104.702.217 1.046.34zM21.552.007l-.078 3a18.382 18.382 0 00-.948 0l-.077-3a21.4 21.4\n          0 011.102 0zM15.032.86l.851 2.877c-.301.089-.6.186-.895.29L13.988 1.2a20.83 20.83 0 011.045-.34zM9.105\n          3.692l1.701 2.47c-.26.179-.513.364-.762.555L8.216 4.34c.29-.224.586-.44.889-.647zM4.339 8.216l2.378\n          1.828c-.191.249-.376.503-.555.762l-2.47-1.701c.208-.303.423-.599.647-.89zm-3.14 5.772l2.828 1.001a17.8 17.8 0\n          00-.29.895l-2.877-.85c.104-.353.217-.702.34-1.046zm-1.192 6.46a21.401 21.401 0 000 1.103l3-.077a18.382 18.382 0\n          010-.948l-3-.077zm.853 6.519l2.877-.851c.089.301.186.6.29.895L1.2 28.012a20.83 20.83 0 01-.34-1.045zm2.832\n          5.928l2.47-1.701c.179.26.364.513.555.762L4.34\n          33.785c-.224-.291-.44-.587-.647-.89zm33.97.89l-2.38-1.828c.192-.25.377-.504.556-.763l2.47\n          1.701c-.208.303-.423.599-.647.89zm3.139-5.773l-2.828-1.001c.104-.295.201-.594.29-.895l2.877.85c-.104.353-.217.702-.34\n          1.046z");
			__sv.attr(path, "fill", "currentColor");
			__sv.attr(svg2, "width", "42");
			__sv.attr(svg2, "height", "35");
			__sv.attr(svg2, "fill", "none");
			__sv.attr(svg2, "xmlns", "http://www.w3.org/2000/svg");
			__sv.attr(svg2, "class", "svelte-7v2dn");
		},
		m(target, anchor) {
			__sv.insert(target, svg0, anchor);
			__sv.append(svg0, circle0);
			__sv.insert(target, t0, anchor);
			__sv.insert(target, svg1, anchor);
			__sv.append(svg1, circle1);
			__sv.append(svg1, circle2);
			__sv.append(svg1, circle3);
			__sv.insert(target, t1, anchor);
			__sv.insert(target, svg2, anchor);
			__sv.append(svg2, path);
			__sv.insert(target, t2, anchor);
			if (if_block) if_block.m(target, anchor);
			__sv.insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty & /*rotation*/ 32) {
				__sv.set_style(svg1, "transform", "rotate(" + (-135 + /*rotation*/ ctx[5]) + "deg)");
			}

			if (/*label*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*label*/ 4) {
						__sv.transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_2(ctx);
					if_block.c();
					__sv.transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				__sv.group_outros();

				__sv.transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				__sv.check_outros();
			}
		},
		i(local) {
			if (current) return;
			__sv.transition_in(if_block);
			current = true;
		},
		o(local) {
			__sv.transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) __sv.detach(svg0);
			if (detaching) __sv.detach(t0);
			if (detaching) __sv.detach(svg1);
			if (detaching) __sv.detach(t1);
			if (detaching) __sv.detach(svg2);
			if (detaching) __sv.detach(t2);
			if (if_block) if_block.d(detaching);
			if (detaching) __sv.detach(if_block_anchor);
		}
	};
}

// (92:2) {#if !!image}
function create_if_block(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = __sv.element("img");
			if (img.src !== (img_src_value = /*image*/ ctx[4])) __sv.attr(img, "src", img_src_value);
			__sv.set_style(img, "user-select", "none");
			__sv.set_style(img, "-webkit-user-drag", "none");
			__sv.set_style(img, "transform", "rotate(" + (-135 + /*rotation*/ ctx[5]) + "deg)");
		},
		m(target, anchor) {
			__sv.insert(target, img, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*image*/ 16 && img.src !== (img_src_value = /*image*/ ctx[4])) {
				__sv.attr(img, "src", img_src_value);
			}

			if (dirty & /*rotation*/ 32) {
				__sv.set_style(img, "transform", "rotate(" + (-135 + /*rotation*/ ctx[5]) + "deg)");
			}
		},
		i: __sv.noop,
		o: __sv.noop,
		d(detaching) {
			if (detaching) __sv.detach(img);
		}
	};
}

// (172:6) {#if label}
function create_if_block_3(ctx) {
	let label_1;
	let current;

	label_1 = new Label({
			props: {
				top: 3,
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			__sv.create_component(label_1.$$.fragment);
		},
		m(target, anchor) {
			__sv.mount_component(label_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const label_1_changes = {};

			if (dirty & /*$$scope, label*/ 8196) {
				label_1_changes.$$scope = { dirty, ctx };
			}

			label_1.$set(label_1_changes);
		},
		i(local) {
			if (current) return;
			__sv.transition_in(label_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			__sv.transition_out(label_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			__sv.destroy_component(label_1, detaching);
		}
	};
}

// (173:8) <Label top={3}>
function create_default_slot_1(ctx) {
	let t;

	return {
		c() {
			t = __sv.text(/*label*/ ctx[2]);
		},
		m(target, anchor) {
			__sv.insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*label*/ 4) __sv.set_data(t, /*label*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) __sv.detach(t);
		}
	};
}

// (130:6) {#if label}
function create_if_block_2(ctx) {
	let label_1;
	let current;

	label_1 = new Label({
			props: {
				top: -4,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			__sv.create_component(label_1.$$.fragment);
		},
		m(target, anchor) {
			__sv.mount_component(label_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const label_1_changes = {};

			if (dirty & /*$$scope, label*/ 8196) {
				label_1_changes.$$scope = { dirty, ctx };
			}

			label_1.$set(label_1_changes);
		},
		i(local) {
			if (current) return;
			__sv.transition_in(label_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			__sv.transition_out(label_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			__sv.destroy_component(label_1, detaching);
		}
	};
}

// (131:8) <Label top={-4}>
function create_default_slot(ctx) {
	let t;

	return {
		c() {
			t = __sv.text(/*label*/ ctx[2]);
		},
		m(target, anchor) {
			__sv.insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*label*/ 4) __sv.set_data(t, /*label*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) __sv.detach(t);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let current_block_type_index;
	let if_block;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block, create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (!!/*image*/ ctx[4]) return 0;
		if (/*size*/ ctx[3] === "s") return 1;
		return 2;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			div = __sv.element("div");
			if_block.c();
			__sv.set_style(div, "left", /*x*/ ctx[0] + "px");
			__sv.set_style(div, "top", /*y*/ ctx[1] + "px");
			__sv.attr(div, "class", "svelte-7v2dn");
			__sv.toggle_class(div, "small", /*size*/ ctx[3] === "s");
		},
		m(target, anchor) {
			__sv.insert(target, div, anchor);
			if_blocks[current_block_type_index].m(div, null);
			current = true;

			if (!mounted) {
				dispose = __sv.action_destroyer(ctx[6].call(null, div, /*onPan*/ ctx[7]));
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				__sv.group_outros();

				__sv.transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				__sv.check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				__sv.transition_in(if_block, 1);
				if_block.m(div, null);
			}

			if (!current || dirty & /*x*/ 1) {
				__sv.set_style(div, "left", /*x*/ ctx[0] + "px");
			}

			if (!current || dirty & /*y*/ 2) {
				__sv.set_style(div, "top", /*y*/ ctx[1] + "px");
			}

			if (dirty & /*size*/ 8) {
				__sv.toggle_class(div, "small", /*size*/ ctx[3] === "s");
			}
		},
		i(local) {
			if (current) return;
			__sv.transition_in(if_block);
			current = true;
		},
		o(local) {
			__sv.transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) __sv.detach(div);
			if_blocks[current_block_type_index].d();
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let rotation;
	let { x } = $$props;
	let { y } = $$props;
	let { min } = $$props;
	let { max } = $$props;
	let { value } = $$props;
	let { label } = $$props;
	let { steps = 200 } = $$props;
	let { precision = 0 } = $$props;
	let { size = "l" } = $$props;
	let { image = null } = $$props;

	var usePan = function (node, onMove) {
		var x;
		var y;

		if (typeof onMove !== "function") {
			return;
		}

		var onMousedown = function (event) {
			x = "clientX" in event
			? event.clientX
			: event.touches[0].clientX;

			y = "clientY" in event
			? event.clientY
			: event.touches[0].clientY;

			window.addEventListener("mousemove", onMousemove, { passive: true });
			window.addEventListener("touchmove", onMousemove, { passive: true });
			window.addEventListener("mouseup", onMouseup, { passive: true });
			window.addEventListener("touchend", onMouseup, { passive: true });
		};

		var onMousemove = function (event) {
			var newX = "clientX" in event
			? event.clientX
			: event.touches[0].clientX;

			var newY = "clientY" in event
			? event.clientY
			: event.touches[0].clientY;

			var dx = newX - x;
			var dy = newY - y;
			x = newX;
			y = newY;
			onMove({ x, y, dx, dy });
		};

		var onMouseup = function () {
			window.removeEventListener("mousemove", onMousemove);
			window.removeEventListener("touchmove", onMousemove);
			window.removeEventListener("mouseup", onMouseup);
			window.removeEventListener("touchend", onMouseup);
		};

		node.addEventListener("mousedown", onMousedown, { passive: true });
		node.addEventListener("touchstart", onMousedown, { passive: true });

		return {
			destroy() {
				node.removeEventListener("mousedown", onMousedown);
				node.removeEventListener("touchstart", onMousedown);
			}
		};
	};

	const onPan = ({ dy }) => {
		if (dy !== 0) {
			const interval = (max - min) / steps;
			const change = helpers.round(value - dy * interval, precision);
			$$invalidate(8, value = Math.max(Math.min(change, max), min));
		}
	};

	$$self.$$set = $$props => {
		if ("x" in $$props) $$invalidate(0, x = $$props.x);
		if ("y" in $$props) $$invalidate(1, y = $$props.y);
		if ("min" in $$props) $$invalidate(9, min = $$props.min);
		if ("max" in $$props) $$invalidate(10, max = $$props.max);
		if ("value" in $$props) $$invalidate(8, value = $$props.value);
		if ("label" in $$props) $$invalidate(2, label = $$props.label);
		if ("steps" in $$props) $$invalidate(11, steps = $$props.steps);
		if ("precision" in $$props) $$invalidate(12, precision = $$props.precision);
		if ("size" in $$props) $$invalidate(3, size = $$props.size);
		if ("image" in $$props) $$invalidate(4, image = $$props.image);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value, min, max*/ 1792) {
			 $$invalidate(5, rotation = helpers.scale(value, [min, max], [0, 270], 0));
		}
	};

	return [
		x,
		y,
		label,
		size,
		image,
		rotation,
		usePan,
		onPan,
		value,
		min,
		max,
		steps,
		precision
	];
}

class Knob extends __sv.SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-7v2dn-style")) add_css();

		__sv.init(this, options, instance, create_fragment, __sv.safe_not_equal, {
			x: 0,
			y: 1,
			min: 9,
			max: 10,
			value: 8,
			label: 2,
			steps: 11,
			precision: 12,
			size: 3,
			image: 4
		});
	}
}

/* src/MTA2.svelte generated by Svelte v3.31.2 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[33] = list[i];
	child_ctx[35] = i;
	return child_ctx;
}

// (354:2) {#each Array(13) as _, index }
function create_each_block(ctx) {
	let light;
	let current;

	light = new Light({
			props: {
				x: 23 + /*index*/ ctx[35] * 27,
				y: 350,
				hue: hueFromStation(/*index*/ ctx[35], /*state*/ ctx[0].station),
				set: "fetched"
			}
		});

	return {
		c() {
			__sv.create_component(light.$$.fragment);
		},
		m(target, anchor) {
			__sv.mount_component(light, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const light_changes = {};
			if (dirty[0] & /*state*/ 1) light_changes.hue = hueFromStation(/*index*/ ctx[35], /*state*/ ctx[0].station);
			light.$set(light_changes);
		},
		i(local) {
			if (current) return;
			__sv.transition_in(light.$$.fragment, local);
			current = true;
		},
		o(local) {
			__sv.transition_out(light.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			__sv.destroy_component(light, detaching);
		}
	};
}

// (348:0) <Faceplate title="" image="../../../assets/mta2-panel3.svg">
function create_default_slot$1(ctx) {
	let button;
	let t1;
	let knob0;
	let updating_value;
	let t2;
	let knob1;
	let updating_value_1;
	let t3;
	let knob2;
	let updating_value_2;
	let t4;
	let t5;
	let switch_1;
	let updating_value_3;
	let t6;
	let patch0;
	let t7;
	let patch1;
	let t8;
	let patch2;
	let t9;
	let patch3;
	let t10;
	let patch4;
	let t11;
	let patch5;
	let t12;
	let patch6;
	let t13;
	let patch7;
	let t14;
	let patch8;
	let current;
	let mounted;
	let dispose;

	function knob0_value_binding(value) {
		/*knob0_value_binding*/ ctx[15].call(null, value);
	}

	let knob0_props = {
		image: "../../../assets/mta2-knob1.svg",
		label: "",
		x: 24,
		y: 90,
		min: 1,
		max: 49,
		steps: 49
	};

	if (/*state*/ ctx[0].station !== void 0) {
		knob0_props.value = /*state*/ ctx[0].station;
	}

	knob0 = new Knob({ props: knob0_props });
	__sv.binding_callbacks.push(() => __sv.bind(knob0, "value", knob0_value_binding));

	function knob1_value_binding(value) {
		/*knob1_value_binding*/ ctx[16].call(null, value);
	}

	let knob1_props = {
		image: "../../../assets/mta2-knob2.svg",
		label: "",
		x: 206,
		y: 76,
		min: 1,
		max: 364,
		steps: 364
	};

	if (/*state*/ ctx[0].day !== void 0) {
		knob1_props.value = /*state*/ ctx[0].day;
	}

	knob1 = new Knob({ props: knob1_props });
	__sv.binding_callbacks.push(() => __sv.bind(knob1, "value", knob1_value_binding));

	function knob2_value_binding(value) {
		/*knob2_value_binding*/ ctx[17].call(null, value);
	}

	let knob2_props = {
		image: "../../../assets/mta2-knob3.svg",
		label: "",
		x: 318,
		y: 95,
		min: 0,
		max: 100,
		steps: 500
	};

	if (/*state*/ ctx[0].hour !== void 0) {
		knob2_props.value = /*state*/ ctx[0].hour;
	}

	knob2 = new Knob({ props: knob2_props });
	__sv.binding_callbacks.push(() => __sv.bind(knob2, "value", knob2_value_binding));
	let each_value = Array(13);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => __sv.transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	function switch_1_value_binding(value) {
		/*switch_1_value_binding*/ ctx[18].call(null, value);
	}

	let switch_1_props = {
		x: 20,
		y: 225,
		onToggle: /*setBipolar*/ ctx[14],
		label: ""
	};

	if (/*state*/ ctx[0].bipolar !== void 0) {
		switch_1_props.value = /*state*/ ctx[0].bipolar;
	}

	switch_1 = new Switch({ props: switch_1_props });
	__sv.binding_callbacks.push(() => __sv.bind(switch_1, "value", switch_1_value_binding));

	patch0 = new Patch({
			props: {
				label: "",
				x: 22,
				y: 70,
				name: "station-in",
				input: /*node*/ ctx[7],
				onConnect: /*onStationConnect*/ ctx[10]
			}
		});

	patch1 = new Patch({
			props: {
				label: "",
				x: 165,
				y: 67,
				name: "date-in",
				input: /*dayNode*/ ctx[8],
				onConnect: /*onDayConnect*/ ctx[11]
			}
		});

	patch2 = new Patch({
			props: {
				label: "",
				x: 292,
				y: 67,
				name: "hour-in",
				input: /*scale*/ ctx[6],
				onConnect: /*onConnect*/ ctx[12]
			}
		});

	patch3 = new Patch({
			props: {
				label: "",
				x: 185,
				y: 246,
				name: "month-out",
				output: /*stationOutput*/ ctx[1]
			}
		});

	patch4 = new Patch({
			props: {
				label: "",
				x: 185,
				y: 204,
				name: "trig-out",
				output: /*trigger*/ ctx[9]
			}
		});

	patch5 = new Patch({
			props: {
				label: "",
				x: 300,
				y: 244,
				name: "exits-19-out",
				output: /*exits19out*/ ctx[3]
			}
		});

	patch6 = new Patch({
			props: {
				label: "",
				x: 300,
				y: 204,
				name: "enters-19-out",
				output: /*entries19out*/ ctx[2]
			}
		});

	patch7 = new Patch({
			props: {
				label: "",
				x: 346,
				y: 244,
				name: "exits-20-out",
				output: /*exits20out*/ ctx[5]
			}
		});

	patch8 = new Patch({
			props: {
				label: "",
				x: 346,
				y: 204,
				name: "enters-20-out",
				output: /*entries20out*/ ctx[4]
			}
		});

	return {
		c() {
			button = __sv.element("button");
			button.textContent = "dbg";
			t1 = __sv.space();
			__sv.create_component(knob0.$$.fragment);
			t2 = __sv.space();
			__sv.create_component(knob1.$$.fragment);
			t3 = __sv.space();
			__sv.create_component(knob2.$$.fragment);
			t4 = __sv.space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t5 = __sv.space();
			__sv.create_component(switch_1.$$.fragment);
			t6 = __sv.space();
			__sv.create_component(patch0.$$.fragment);
			t7 = __sv.space();
			__sv.create_component(patch1.$$.fragment);
			t8 = __sv.space();
			__sv.create_component(patch2.$$.fragment);
			t9 = __sv.space();
			__sv.create_component(patch3.$$.fragment);
			t10 = __sv.space();
			__sv.create_component(patch4.$$.fragment);
			t11 = __sv.space();
			__sv.create_component(patch5.$$.fragment);
			t12 = __sv.space();
			__sv.create_component(patch6.$$.fragment);
			t13 = __sv.space();
			__sv.create_component(patch7.$$.fragment);
			t14 = __sv.space();
			__sv.create_component(patch8.$$.fragment);
			__sv.set_style(button, "color", "#111");
			__sv.set_style(button, "background-color", "#0fa");
			__sv.set_style(button, "border-radius", "20px");
		},
		m(target, anchor) {
			__sv.insert(target, button, anchor);
			__sv.insert(target, t1, anchor);
			__sv.mount_component(knob0, target, anchor);
			__sv.insert(target, t2, anchor);
			__sv.mount_component(knob1, target, anchor);
			__sv.insert(target, t3, anchor);
			__sv.mount_component(knob2, target, anchor);
			__sv.insert(target, t4, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			__sv.insert(target, t5, anchor);
			__sv.mount_component(switch_1, target, anchor);
			__sv.insert(target, t6, anchor);
			__sv.mount_component(patch0, target, anchor);
			__sv.insert(target, t7, anchor);
			__sv.mount_component(patch1, target, anchor);
			__sv.insert(target, t8, anchor);
			__sv.mount_component(patch2, target, anchor);
			__sv.insert(target, t9, anchor);
			__sv.mount_component(patch3, target, anchor);
			__sv.insert(target, t10, anchor);
			__sv.mount_component(patch4, target, anchor);
			__sv.insert(target, t11, anchor);
			__sv.mount_component(patch5, target, anchor);
			__sv.insert(target, t12, anchor);
			__sv.mount_component(patch6, target, anchor);
			__sv.insert(target, t13, anchor);
			__sv.mount_component(patch7, target, anchor);
			__sv.insert(target, t14, anchor);
			__sv.mount_component(patch8, target, anchor);
			current = true;

			if (!mounted) {
				dispose = __sv.listen(button, "click", /*test*/ ctx[13]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			const knob0_changes = {};

			if (!updating_value && dirty[0] & /*state*/ 1) {
				updating_value = true;
				knob0_changes.value = /*state*/ ctx[0].station;
				__sv.add_flush_callback(() => updating_value = false);
			}

			knob0.$set(knob0_changes);
			const knob1_changes = {};

			if (!updating_value_1 && dirty[0] & /*state*/ 1) {
				updating_value_1 = true;
				knob1_changes.value = /*state*/ ctx[0].day;
				__sv.add_flush_callback(() => updating_value_1 = false);
			}

			knob1.$set(knob1_changes);
			const knob2_changes = {};

			if (!updating_value_2 && dirty[0] & /*state*/ 1) {
				updating_value_2 = true;
				knob2_changes.value = /*state*/ ctx[0].hour;
				__sv.add_flush_callback(() => updating_value_2 = false);
			}

			knob2.$set(knob2_changes);

			if (dirty[0] & /*state*/ 1) {
				each_value = Array(13);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						__sv.transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						__sv.transition_in(each_blocks[i], 1);
						each_blocks[i].m(t5.parentNode, t5);
					}
				}

				__sv.group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				__sv.check_outros();
			}

			const switch_1_changes = {};

			if (!updating_value_3 && dirty[0] & /*state*/ 1) {
				updating_value_3 = true;
				switch_1_changes.value = /*state*/ ctx[0].bipolar;
				__sv.add_flush_callback(() => updating_value_3 = false);
			}

			switch_1.$set(switch_1_changes);
			const patch3_changes = {};
			if (dirty[0] & /*stationOutput*/ 2) patch3_changes.output = /*stationOutput*/ ctx[1];
			patch3.$set(patch3_changes);
			const patch5_changes = {};
			if (dirty[0] & /*exits19out*/ 8) patch5_changes.output = /*exits19out*/ ctx[3];
			patch5.$set(patch5_changes);
			const patch6_changes = {};
			if (dirty[0] & /*entries19out*/ 4) patch6_changes.output = /*entries19out*/ ctx[2];
			patch6.$set(patch6_changes);
			const patch7_changes = {};
			if (dirty[0] & /*exits20out*/ 32) patch7_changes.output = /*exits20out*/ ctx[5];
			patch7.$set(patch7_changes);
			const patch8_changes = {};
			if (dirty[0] & /*entries20out*/ 16) patch8_changes.output = /*entries20out*/ ctx[4];
			patch8.$set(patch8_changes);
		},
		i(local) {
			if (current) return;
			__sv.transition_in(knob0.$$.fragment, local);
			__sv.transition_in(knob1.$$.fragment, local);
			__sv.transition_in(knob2.$$.fragment, local);

			for (let i = 0; i < each_value.length; i += 1) {
				__sv.transition_in(each_blocks[i]);
			}

			__sv.transition_in(switch_1.$$.fragment, local);
			__sv.transition_in(patch0.$$.fragment, local);
			__sv.transition_in(patch1.$$.fragment, local);
			__sv.transition_in(patch2.$$.fragment, local);
			__sv.transition_in(patch3.$$.fragment, local);
			__sv.transition_in(patch4.$$.fragment, local);
			__sv.transition_in(patch5.$$.fragment, local);
			__sv.transition_in(patch6.$$.fragment, local);
			__sv.transition_in(patch7.$$.fragment, local);
			__sv.transition_in(patch8.$$.fragment, local);
			current = true;
		},
		o(local) {
			__sv.transition_out(knob0.$$.fragment, local);
			__sv.transition_out(knob1.$$.fragment, local);
			__sv.transition_out(knob2.$$.fragment, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				__sv.transition_out(each_blocks[i]);
			}

			__sv.transition_out(switch_1.$$.fragment, local);
			__sv.transition_out(patch0.$$.fragment, local);
			__sv.transition_out(patch1.$$.fragment, local);
			__sv.transition_out(patch2.$$.fragment, local);
			__sv.transition_out(patch3.$$.fragment, local);
			__sv.transition_out(patch4.$$.fragment, local);
			__sv.transition_out(patch5.$$.fragment, local);
			__sv.transition_out(patch6.$$.fragment, local);
			__sv.transition_out(patch7.$$.fragment, local);
			__sv.transition_out(patch8.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) __sv.detach(button);
			if (detaching) __sv.detach(t1);
			__sv.destroy_component(knob0, detaching);
			if (detaching) __sv.detach(t2);
			__sv.destroy_component(knob1, detaching);
			if (detaching) __sv.detach(t3);
			__sv.destroy_component(knob2, detaching);
			if (detaching) __sv.detach(t4);
			__sv.destroy_each(each_blocks, detaching);
			if (detaching) __sv.detach(t5);
			__sv.destroy_component(switch_1, detaching);
			if (detaching) __sv.detach(t6);
			__sv.destroy_component(patch0, detaching);
			if (detaching) __sv.detach(t7);
			__sv.destroy_component(patch1, detaching);
			if (detaching) __sv.detach(t8);
			__sv.destroy_component(patch2, detaching);
			if (detaching) __sv.detach(t9);
			__sv.destroy_component(patch3, detaching);
			if (detaching) __sv.detach(t10);
			__sv.destroy_component(patch4, detaching);
			if (detaching) __sv.detach(t11);
			__sv.destroy_component(patch5, detaching);
			if (detaching) __sv.detach(t12);
			__sv.destroy_component(patch6, detaching);
			if (detaching) __sv.detach(t13);
			__sv.destroy_component(patch7, detaching);
			if (detaching) __sv.detach(t14);
			__sv.destroy_component(patch8, detaching);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment$1(ctx) {
	let faceplate;
	let current;

	faceplate = new Faceplate({
			props: {
				title: "",
				image: "../../../assets/mta2-panel3.svg",
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			__sv.create_component(faceplate.$$.fragment);
		},
		m(target, anchor) {
			__sv.mount_component(faceplate, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const faceplate_changes = {};

			if (dirty[0] & /*entries20out, exits20out, entries19out, exits19out, stationOutput, state*/ 63 | dirty[1] & /*$$scope*/ 32) {
				faceplate_changes.$$scope = { dirty, ctx };
			}

			faceplate.$set(faceplate_changes);
		},
		i(local) {
			if (current) return;
			__sv.transition_in(faceplate.$$.fragment, local);
			current = true;
		},
		o(local) {
			__sv.transition_out(faceplate.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			__sv.destroy_component(faceplate, detaching);
		}
	};
}

//  should STATION be 1-49 no interpolation or should it be possible to interpolate between the stations idk
function hueFromStation(index, st) {
	// if station is 1, 2, 3, or 4,             1      2      3      4      5
	// only 2 lights engaged, at strengths of 4 - 0, 3 - 1, 2 - 2, 1 - 3, 0 - 4
	let station = st - 1;

	if (station / 4 == index) {
		// return `#ff3333`
		return "#FFCA85";
	} else if ((station - 1) / 4 == index || (station + 1) / 4 == index) {
		// return `#CC0000`
		return `#ffa733`;
	} else if ((station - 2) / 4 == index || (station + 2) / 4 == index) {
		// return `#A30000`
		return `#ff8600`;
	} else if ((station - 3) / 4 == index || (station + 3) / 4 == index) {
		// return `#660000`
		return `#b85900`;
	} else {
		// return `#222222`
		return `#444444`;
	}
} // return `#${fullColorHex( 255 , 80 + Math.round((station % 4)/4 * 175), 80 + Math.round((station % 4)/4 * 175) )}`
// return `#${fullColorHex( 255 , 80 + Math.round((index % 4)/4 * 175), 80 + Math.round((index % 4)/4 * 175) )}`

function instance$1($$self, $$props, $$invalidate) {
	var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P
			? value
			: new P(function (resolve) {
						resolve(value);
					});
		}

		return new (P || (P = Promise))(function (resolve, reject) {
				function fulfilled(value) {
					try {
						step(generator.next(value));
					} catch(e) {
						reject(e);
					}
				}

				function rejected(value) {
					try {
						step(generator["throw"](value));
					} catch(e) {
						reject(e);
					}
				}

				function step(result) {
					result.done
					? resolve(result.value)
					: adopt(result.value).then(fulfilled, rejected);
				}

				step((generator = generator.apply(thisArg, _arguments || [])).next());
			});
	};

	

	let { state = {
		station: 1,
		day: 0,
		hour: 0,
		type: "sine",
		freq: 440,
		runFreq: 0.1,
		running: false,
		bipolar: true,
		runningSouth: true,
		fm: 1
	} } = $$props;

	let running;
	let dayRunning;
	let incomeData = [];
	let turnstiles2019 = [];
	let turnstiles2020 = [];

	// ../../../assets/twotrain.json
	onMount(() => __awaiter(void 0, void 0, void 0, function* () {
		const res = yield fetch("../../../assets/twotrain.json", {
			method: "GET",
			headers: { "Content-Type": "application/json" }
		});

		let data = yield res.json();
		data = data.reverse();

		// console.log(data)
		for (let i = 0; i < data.length; i++) {
			incomeData[i] = data[i]["Month Income"];
		}

		console.log(incomeData);

		const resp = yield fetch("../../../assets/turnstiles2019.json", {
			method: "GET",
			headers: { "Content-Type": "application/json" }
		});

		let dat = yield resp.json();

		// turnstiles2019 = dat
		// data = data.reverse()
		// console.log(data)
		let name = null;

		let counter = 0;

		for (let i = 0; i < dat.length; i++) {
			// while(counter < 49){
			if (name == null) {
				turnstiles2019[counter] = {};
				turnstiles2019[counter].name = dat[0].stop_name;
				turnstiles2019[counter].entries = [];
				turnstiles2019[counter].exits = [];
				turnstiles2019[counter].entries.push(dat[0].entries);
				turnstiles2019[counter].exits.push(dat[0].exits);
				name = dat[0].stop_name;
			} else if (turnstiles2019[counter].entries.length == 365) {
				name = "none";
			} else if (name == dat[i].stop_name) {
				turnstiles2019[counter].entries.push(dat[i].entries);
				turnstiles2019[counter].exits.push(dat[i].exits);
			}

			// else 
			if (name !== dat[i].stop_name) {
				if (turnstiles2019[counter].entries.length < 365) {
					for (let j = turnstiles2019[counter].entries.length; j < 365; j++) turnstiles2019[counter].entries.push(0);
				}

				if (turnstiles2019[counter].exits.length < 365) {
					for (let j = turnstiles2019[counter].exits.length; j < 365; j++) turnstiles2019[counter].exits.push(0);
				}

				counter += 1;
				name = dat[i].stop_name;
				turnstiles2019[counter] = {};
				turnstiles2019[counter].name = dat[i].stop_name;
				turnstiles2019[counter].entries = [];
				turnstiles2019[counter].exits = [];
				turnstiles2019[counter].entries.push(dat[i].entries);
				turnstiles2019[counter].exits.push(dat[i].exits);
			}
		} // if (turnstiles2019[name] = )
		// turnstiles2019[i] = dat[i]

		turnstiles2019 = turnstiles2019.reverse();
		console.log(turnstiles2019);

		const response = yield fetch("../../../assets/turnstiles2020.json", {
			method: "GET",
			headers: { "Content-Type": "application/json" }
		});

		let dat20 = yield response.json();

		// turnstiles2019 = dat
		// data = data.reverse()
		// console.log(data)
		let name20 = null;

		let count = 0;

		for (let i = 0; i < dat20.length; i++) {
			// while(count < 49){
			// console.log(dat20[i])
			if (name20 == null) {
				turnstiles2020[count] = {};
				turnstiles2020[count].name = dat20[0].stop_name;
				turnstiles2020[count].entries = [];
				turnstiles2020[count].exits = [];
				turnstiles2020[count].entries.push(dat20[0].entries);
				turnstiles2020[count].exits.push(dat20[0].exits);
				name20 = dat20[0].stop_name;
			} else if (turnstiles2020[count].entries.length == 365) {
				name20 = "none";
			} else if (name20 == dat20[i].stop_name) {
				turnstiles2020[count].entries.push(dat20[i].entries);
				turnstiles2020[count].exits.push(dat20[i].exits);
			}

			// else 
			if (name20 !== dat20[i].stop_name) {
				if (turnstiles2020[count].entries.length < 365) {
					for (let j = turnstiles2020[count].entries.length; j < 365; j++) turnstiles2020[count].entries.push(0);
				}

				if (turnstiles2020[count].exits.length < 365) {
					for (let j = turnstiles2020[count].exits.length; j < 365; j++) turnstiles2020[count].exits.push(0);
				}

				count += 1;
				name20 = dat20[i].stop_name;
				turnstiles2020[count] = {};
				turnstiles2020[count].name = dat20[i].stop_name;
				turnstiles2020[count].entries = [];
				turnstiles2020[count].exits = [];
				turnstiles2020[count].entries.push(dat20[i].entries);
				turnstiles2020[count].exits.push(dat20[i].exits);
			}
		} // if (turnstiles2019[name] = )
		// turnstiles2019[i] = dat[i]

		// turnstiles2020 = turnstiles2020.reverse()
		console.log(turnstiles2020);
	}));

	const oscillator = new Tone.Oscillator(state.freq, state.type).start();
	const scale = new Tone.Scale(40, 2400);
	let node = new Tone.Waveform(512);
	let dayNode = new Tone.Waveform(512);
	const trigger = new Bang();

	// let transport = new Transport
	Tone.Transport.start();

	// let node = new Scale(40, 2400)
	let stationOutput = new Tone.Signal(0, "frequency");

	let entries19out = new Tone.Signal(0, "frequency");
	let exits19out = new Tone.Signal(0, "frequency");
	let entries20out = new Tone.Signal(0, "frequency");
	let exits20out = new Tone.Signal(0, "frequency");

	// $: state.station, 
	// $: state.station, console.log('changed')
	// $: scale.min = Math.max(MIN, state.freq - state.freq * state.fm);
	// $: scale.max = Math.min(MAX, state.freq + (MAX - state.freq) * state.fm);
	// scale takes an input between 0 and 1 and scales it
	//  to the given values
	const bangTrigger = time => {
		// console.log(incomeData[state.station])
		trigger.bang(time, true, true);

		if (incomeData[state.station] > 1000) {
			$$invalidate(1, stationOutput.value = incomeData[state.station] / 1000, stationOutput);
		}
	}; // console.log(stationOutput.value)

	const bangDayTrigger = time => {
		// console.log(incomeData[state.station])
		// trigger.bang(time, true, true);
		if (!!turnstiles2019[state.station]) {
			$$invalidate(2, entries19out.value = turnstiles2019[state.station].entries[state.day] / 1000, entries19out);
			$$invalidate(3, exits19out.value = turnstiles2019[state.station].exits[state.day] / 1000, exits19out);
		} // console.log(exits19out.value)

		if (!!turnstiles2020[state.station]) {
			// console.log('changing val!')
			$$invalidate(4, entries20out.value = turnstiles2020[state.station].entries[state.day] / 1000, entries20out);

			$$invalidate(5, exits20out.value = turnstiles2020[state.station].exits[state.day] / 1000, exits20out);
		}
	};

	const loop = () => {
		// if running, station loop
		// if dayrunning, day loop
		// if neither, return
		// request animation frame
		if (!running && !dayRunning) {
			return;
		}

		if (running == true) {
			const wave = node.getValue();
			let newStation;

			if (state.bipolar) {
				newStation = Math.round(remap(wave[0], -1, 1, 1, 49));
			} else {
				newStation = Math.round(remap(wave[0], 0, 1, 1, 49));
			}

			if (state.station != newStation) {
				$$invalidate(0, state.station = newStation, state);
			}
		}

		if (dayRunning == true) {
			const dayWave = dayNode.getValue();
			let newDay;

			if (state.bipolar) {
				newDay = Math.round(remap(dayWave[0], -1, 1, 1, 364));
			} else {
				newDay = Math.round(remap(dayWave[0], 0, 1, 1, 364));
			}

			if (state.day != newDay) {
				$$invalidate(0, state.day = newDay, state);
			}
		}

		requestAnimationFrame(loop);
	}; // console.log(wave[0])
	// console.log(state.station)

	const onStationConnect = nodes => {
		if (nodes) {
			running = true;
			loop();
		} else {
			running = false;
		}
		// scale.disconnect(oscillator.frequency);
		// oscillator.frequency.overridden = false;

		// oscillator.frequency.value = state.freq;
		console.log("connected to station");
	}; // console.log(node)
	// console.log(scale)

	const onDayConnect = nodes => {
		console.log(dayRunning);

		if (nodes) {
			dayRunning = true;
			loop();
		} else {
			dayRunning = false;
		}
	};

	const onConnect = nodes => {
		if (nodes) {
			console.log(scale);
			scale.connect(oscillator.frequency);
		} else {
			scale.disconnect(oscillator.frequency);
			oscillator.frequency.overridden = false;
			oscillator.frequency.value = state.freq;
		}
	};

	const remap = (num, in_min, in_max, out_min, out_max) => {
		return (num - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	};

	const test = e => {
		console.log(state.day);
		console.log(turnstiles2019[state.station].entries);
		console.log(turnstiles2019[state.station].entries[state.day]);
	};

	const setBipolar = () => {
		$$invalidate(0, state.bipolar = !state.bipolar, state);
	};

	function knob0_value_binding(value) {
		state.station = value;
		$$invalidate(0, state);
	}

	function knob1_value_binding(value) {
		state.day = value;
		$$invalidate(0, state);
	}

	function knob2_value_binding(value) {
		state.hour = value;
		$$invalidate(0, state);
	}

	function switch_1_value_binding(value) {
		state.bipolar = value;
		$$invalidate(0, state);
	}

	$$self.$$set = $$props => {
		if ("state" in $$props) $$invalidate(0, state = $$props.state);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*state*/ 1) {
			// node.start();
			// $: node.frequency.value = state.runFreq;
			// $: node.type = state.type;
			 oscillator.frequency.value = state.freq;
		}

		if ($$self.$$.dirty[0] & /*state*/ 1) {
			 oscillator.type = state.type;
		}

		if ($$self.$$.dirty[0] & /*state*/ 1) {
			 (state.station, bangTrigger(Tone.Transport.now()));
		}

		if ($$self.$$.dirty[0] & /*state*/ 1) {
			 (state.day, bangDayTrigger(Tone.Transport.now()));
		}
	};

	return [
		state,
		stationOutput,
		entries19out,
		exits19out,
		entries20out,
		exits20out,
		scale,
		node,
		dayNode,
		trigger,
		onStationConnect,
		onDayConnect,
		onConnect,
		test,
		setBipolar,
		knob0_value_binding,
		knob1_value_binding,
		knob2_value_binding,
		switch_1_value_binding
	];
}

class MTA2 extends __sv.SvelteComponent {
	constructor(options) {
		super();
		__sv.init(this, options, instance$1, create_fragment$1, __sv.safe_not_equal, { state: 0 }, [-1, -1]);
	}
}

export default MTA2;
