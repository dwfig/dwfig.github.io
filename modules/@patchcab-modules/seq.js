
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { Faceplate, Bang, Patch, Switch } from '/js/core.js';

/* src/SEQ.svelte generated by Svelte v3.31.2 */

function add_css() {
	var style = __sv.element("style");
	style.id = "svelte-zmh6p6-style";
	style.textContent = "steps.svelte-zmh6p6{position:absolute;left:20px;display:grid;grid-template-columns:repeat(16, 1fr);grid-template-rows:1fr;grid-column-gap:10px;width:calc(100% - 40px);height:20px;margin-bottom:8px}";
	__sv.append(document.head, style);
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	child_ctx[9] = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	child_ctx[12] = i;
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i];
	child_ctx[15] = i;
	return child_ctx;
}

// (51:6) {#each row as cell, cellIndex}
function create_each_block_2(ctx) {
	let switch_1;
	let current;

	function func() {
		return /*func*/ ctx[6](/*rowIndex*/ ctx[12], /*cellIndex*/ ctx[15]);
	}

	switch_1 = new Switch({
			props: {
				x: /*cellIndex*/ ctx[15] * 28,
				y: 0,
				value: /*cell*/ ctx[13] === 1,
				high: /*step*/ ctx[1] === /*cellIndex*/ ctx[15] + 1,
				square: true,
				onToggle: func
			}
		});

	return {
		c() {
			__sv.create_component(switch_1.$$.fragment);
		},
		m(target, anchor) {
			__sv.mount_component(switch_1, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const switch_1_changes = {};
			if (dirty & /*state*/ 1) switch_1_changes.value = /*cell*/ ctx[13] === 1;
			if (dirty & /*step*/ 2) switch_1_changes.high = /*step*/ ctx[1] === /*cellIndex*/ ctx[15] + 1;
			switch_1.$set(switch_1_changes);
		},
		i(local) {
			if (current) return;
			__sv.transition_in(switch_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			__sv.transition_out(switch_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			__sv.destroy_component(switch_1, detaching);
		}
	};
}

// (49:2) {#each state.grid as row, rowIndex}
function create_each_block_1(ctx) {
	let steps;
	let current;
	let each_value_2 = /*row*/ ctx[10];
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	const out = i => __sv.transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			steps = __sv.element("steps");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			__sv.set_style(steps, "top", 70 + /*rowIndex*/ ctx[12] * 40 + "px");
			__sv.attr(steps, "class", "svelte-zmh6p6");
		},
		m(target, anchor) {
			__sv.insert(target, steps, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(steps, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*state, step, toggle*/ 7) {
				each_value_2 = /*row*/ ctx[10];
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						__sv.transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						__sv.transition_in(each_blocks[i], 1);
						each_blocks[i].m(steps, null);
					}
				}

				__sv.group_outros();

				for (i = each_value_2.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				__sv.check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_2.length; i += 1) {
				__sv.transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				__sv.transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) __sv.detach(steps);
			__sv.destroy_each(each_blocks, detaching);
		}
	};
}

// (64:2) {#each nodes as node, index}
function create_each_block(ctx) {
	let patch;
	let current;

	patch = new Patch({
			props: {
				x: 476,
				y: 72 + /*index*/ ctx[9] * 40,
				name: "out-gate-" + /*index*/ ctx[9],
				output: /*node*/ ctx[7]
			}
		});

	return {
		c() {
			__sv.create_component(patch.$$.fragment);
		},
		m(target, anchor) {
			__sv.mount_component(patch, target, anchor);
			current = true;
		},
		p: __sv.noop,
		i(local) {
			if (current) return;
			__sv.transition_in(patch.$$.fragment, local);
			current = true;
		},
		o(local) {
			__sv.transition_out(patch.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			__sv.destroy_component(patch, detaching);
		}
	};
}

// (48:0) <Faceplate title="SEQ" color="#ffb254" light>
function create_default_slot(ctx) {
	let t0;
	let t1;
	let patch0;
	let t2;
	let patch1;
	let current;
	let each_value_1 = /*state*/ ctx[0].grid;
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => __sv.transition_out(each_blocks_1[i], 1, 1, () => {
		each_blocks_1[i] = null;
	});

	let each_value = /*nodes*/ ctx[3];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out_1 = i => __sv.transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	patch0 = new Patch({
			props: {
				label: "gate",
				x: 20,
				y: 320,
				name: "gate",
				input: /*bang*/ ctx[4]
			}
		});

	patch1 = new Patch({
			props: {
				label: "reset",
				x: 60,
				y: 320,
				name: "reset",
				input: /*reset*/ ctx[5]
			}
		});

	return {
		c() {
			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t0 = __sv.space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t1 = __sv.space();
			__sv.create_component(patch0.$$.fragment);
			t2 = __sv.space();
			__sv.create_component(patch1.$$.fragment);
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(target, anchor);
			}

			__sv.insert(target, t0, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			__sv.insert(target, t1, anchor);
			__sv.mount_component(patch0, target, anchor);
			__sv.insert(target, t2, anchor);
			__sv.mount_component(patch1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*state, step, toggle*/ 7) {
				each_value_1 = /*state*/ ctx[0].grid;
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
						__sv.transition_in(each_blocks_1[i], 1);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						__sv.transition_in(each_blocks_1[i], 1);
						each_blocks_1[i].m(t0.parentNode, t0);
					}
				}

				__sv.group_outros();

				for (i = each_value_1.length; i < each_blocks_1.length; i += 1) {
					out(i);
				}

				__sv.check_outros();
			}

			if (dirty & /*nodes*/ 8) {
				each_value = /*nodes*/ ctx[3];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						__sv.transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						__sv.transition_in(each_blocks[i], 1);
						each_blocks[i].m(t1.parentNode, t1);
					}
				}

				__sv.group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out_1(i);
				}

				__sv.check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				__sv.transition_in(each_blocks_1[i]);
			}

			for (let i = 0; i < each_value.length; i += 1) {
				__sv.transition_in(each_blocks[i]);
			}

			__sv.transition_in(patch0.$$.fragment, local);
			__sv.transition_in(patch1.$$.fragment, local);
			current = true;
		},
		o(local) {
			each_blocks_1 = each_blocks_1.filter(Boolean);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				__sv.transition_out(each_blocks_1[i]);
			}

			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				__sv.transition_out(each_blocks[i]);
			}

			__sv.transition_out(patch0.$$.fragment, local);
			__sv.transition_out(patch1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			__sv.destroy_each(each_blocks_1, detaching);
			if (detaching) __sv.detach(t0);
			__sv.destroy_each(each_blocks, detaching);
			if (detaching) __sv.detach(t1);
			__sv.destroy_component(patch0, detaching);
			if (detaching) __sv.detach(t2);
			__sv.destroy_component(patch1, detaching);
		}
	};
}

function create_fragment(ctx) {
	let faceplate;
	let current;

	faceplate = new Faceplate({
			props: {
				title: "SEQ",
				color: "#ffb254",
				light: true,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			__sv.create_component(faceplate.$$.fragment);
		},
		m(target, anchor) {
			__sv.mount_component(faceplate, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const faceplate_changes = {};

			if (dirty & /*$$scope, state, step*/ 65539) {
				faceplate_changes.$$scope = { dirty, ctx };
			}

			faceplate.$set(faceplate_changes);
		},
		i(local) {
			if (current) return;
			__sv.transition_in(faceplate.$$.fragment, local);
			current = true;
		},
		o(local) {
			__sv.transition_out(faceplate.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			__sv.destroy_component(faceplate, detaching);
		}
	};
}

const ROWS = 6;
const STEPS = 16;

function instance($$self, $$props, $$invalidate) {
	let { state = {
		grid: Array(ROWS).fill(Array(STEPS).fill(0))
	} } = $$props;

	let step = 1;

	const toggle = (row, cell) => {
		const clone = [];

		for (let i = 0; i < ROWS; i++) {
			clone[i] = state.grid[i].slice(0);

			if (i === row) {
				clone[i][cell] = clone[i][cell] === 1 ? 0 : 1;
			}
		}

		$$invalidate(0, state.grid = clone, state);
	};

	const nodes = Array(ROWS).fill(true).map(() => new Bang());

	const bang = new Bang((time, on, off) => {
			$$invalidate(1, step = step === STEPS ? 1 : step + 1);

			for (let i = 0; i < ROWS; i++) {
				if (state.grid[i][step - 1]) {
					nodes[i].bang(time, on, off);
				}
			}
		});

	const reset = new Bang(() => {
			$$invalidate(1, step = 1);
		});

	const func = (rowIndex, cellIndex) => toggle(rowIndex, cellIndex);

	$$self.$$set = $$props => {
		if ("state" in $$props) $$invalidate(0, state = $$props.state);
	};

	return [state, step, toggle, nodes, bang, reset, func];
}

class SEQ extends __sv.SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-zmh6p6-style")) add_css();
		__sv.init(this, options, instance, create_fragment, __sv.safe_not_equal, { state: 0 });
	}
}

export default SEQ;
