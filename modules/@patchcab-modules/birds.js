
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { Faceplate, Knob, Patch } from '/js/core.js';

/* src/BIRDS.svelte generated by Svelte v3.31.2 */

function create_default_slot(ctx) {
	let knob0;
	let updating_value;
	let t0;
	let patch0;
	let t1;
	let knob1;
	let updating_value_1;
	let t2;
	let patch1;
	let t3;
	let patch2;
	let t4;
	let patch3;
	let t5;
	let patch4;
	let t6;
	let patch5;
	let t7;
	let patch6;
	let t8;
	let patch7;
	let t9;
	let patch8;
	let t10;
	let patch9;
	let t11;
	let patch10;
	let t12;
	let patch11;
	let t13;
	let patch12;
	let current;

	function knob0_value_binding(value) {
		/*knob0_value_binding*/ ctx[2].call(null, value);
	}

	let knob0_props = {
		label: "month",
		x: 88,
		y: 64,
		min: MIN,
		max: MAX,
		steps: 500
	};

	if (/*state*/ ctx[0].freq !== void 0) {
		knob0_props.value = /*state*/ ctx[0].freq;
	}

	knob0 = new Knob({ props: knob0_props });
	__sv.binding_callbacks.push(() => __sv.bind(knob0, "value", knob0_value_binding));

	patch0 = new Patch({
			props: {
				x: 20,
				y: 52,
				name: "signal-in",
				output: /*oscillator*/ ctx[1]
			}
		});

	function knob1_value_binding(value) {
		/*knob1_value_binding*/ ctx[3].call(null, value);
	}

	let knob1_props = {
		size: "s",
		label: "year",
		x: 24,
		y: 84,
		min: 0.01,
		max: 1,
		precision: 2
	};

	if (/*state*/ ctx[0].fm !== void 0) {
		knob1_props.value = /*state*/ ctx[0].fm;
	}

	knob1 = new Knob({ props: knob1_props });
	__sv.binding_callbacks.push(() => __sv.bind(knob1, "value", knob1_value_binding));

	patch1 = new Patch({
			props: {
				x: 70,
				y: 155,
				name: "signal-in",
				output: /*oscillator*/ ctx[1]
			}
		});

	patch2 = new Patch({
			props: {
				x: 120,
				y: 155,
				name: "audio-out",
				output: /*oscillator*/ ctx[1]
			}
		});

	patch3 = new Patch({
			props: {
				x: 70,
				y: 190,
				name: "signal-in",
				output: /*oscillator*/ ctx[1]
			}
		});

	patch4 = new Patch({
			props: {
				x: 120,
				y: 190,
				name: "audio-out",
				output: /*oscillator*/ ctx[1]
			}
		});

	patch5 = new Patch({
			props: {
				x: 70,
				y: 225,
				name: "signal-in",
				output: /*oscillator*/ ctx[1]
			}
		});

	patch6 = new Patch({
			props: {
				x: 120,
				y: 225,
				name: "audio-out",
				output: /*oscillator*/ ctx[1]
			}
		});

	patch7 = new Patch({
			props: {
				x: 70,
				y: 260,
				name: "signal-in",
				output: /*oscillator*/ ctx[1]
			}
		});

	patch8 = new Patch({
			props: {
				x: 120,
				y: 260,
				name: "audio-out",
				output: /*oscillator*/ ctx[1]
			}
		});

	patch9 = new Patch({
			props: {
				x: 70,
				y: 295,
				name: "signal-in",
				output: /*oscillator*/ ctx[1]
			}
		});

	patch10 = new Patch({
			props: {
				x: 120,
				y: 295,
				name: "audio-out",
				output: /*oscillator*/ ctx[1]
			}
		});

	patch11 = new Patch({
			props: {
				label: "call",
				x: 70,
				y: 330,
				name: "signal-in",
				output: /*oscillator*/ ctx[1]
			}
		});

	patch12 = new Patch({
			props: {
				label: "count",
				x: 120,
				y: 330,
				name: "audio-out",
				output: /*oscillator*/ ctx[1]
			}
		});

	return {
		c() {
			__sv.create_component(knob0.$$.fragment);
			t0 = __sv.space();
			__sv.create_component(patch0.$$.fragment);
			t1 = __sv.space();
			__sv.create_component(knob1.$$.fragment);
			t2 = __sv.space();
			__sv.create_component(patch1.$$.fragment);
			t3 = __sv.space();
			__sv.create_component(patch2.$$.fragment);
			t4 = __sv.space();
			__sv.create_component(patch3.$$.fragment);
			t5 = __sv.space();
			__sv.create_component(patch4.$$.fragment);
			t6 = __sv.space();
			__sv.create_component(patch5.$$.fragment);
			t7 = __sv.space();
			__sv.create_component(patch6.$$.fragment);
			t8 = __sv.space();
			__sv.create_component(patch7.$$.fragment);
			t9 = __sv.space();
			__sv.create_component(patch8.$$.fragment);
			t10 = __sv.space();
			__sv.create_component(patch9.$$.fragment);
			t11 = __sv.space();
			__sv.create_component(patch10.$$.fragment);
			t12 = __sv.space();
			__sv.create_component(patch11.$$.fragment);
			t13 = __sv.space();
			__sv.create_component(patch12.$$.fragment);
		},
		m(target, anchor) {
			__sv.mount_component(knob0, target, anchor);
			__sv.insert(target, t0, anchor);
			__sv.mount_component(patch0, target, anchor);
			__sv.insert(target, t1, anchor);
			__sv.mount_component(knob1, target, anchor);
			__sv.insert(target, t2, anchor);
			__sv.mount_component(patch1, target, anchor);
			__sv.insert(target, t3, anchor);
			__sv.mount_component(patch2, target, anchor);
			__sv.insert(target, t4, anchor);
			__sv.mount_component(patch3, target, anchor);
			__sv.insert(target, t5, anchor);
			__sv.mount_component(patch4, target, anchor);
			__sv.insert(target, t6, anchor);
			__sv.mount_component(patch5, target, anchor);
			__sv.insert(target, t7, anchor);
			__sv.mount_component(patch6, target, anchor);
			__sv.insert(target, t8, anchor);
			__sv.mount_component(patch7, target, anchor);
			__sv.insert(target, t9, anchor);
			__sv.mount_component(patch8, target, anchor);
			__sv.insert(target, t10, anchor);
			__sv.mount_component(patch9, target, anchor);
			__sv.insert(target, t11, anchor);
			__sv.mount_component(patch10, target, anchor);
			__sv.insert(target, t12, anchor);
			__sv.mount_component(patch11, target, anchor);
			__sv.insert(target, t13, anchor);
			__sv.mount_component(patch12, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const knob0_changes = {};

			if (!updating_value && dirty & /*state*/ 1) {
				updating_value = true;
				knob0_changes.value = /*state*/ ctx[0].freq;
				__sv.add_flush_callback(() => updating_value = false);
			}

			knob0.$set(knob0_changes);
			const patch0_changes = {};
			if (dirty & /*oscillator*/ 2) patch0_changes.output = /*oscillator*/ ctx[1];
			patch0.$set(patch0_changes);
			const knob1_changes = {};

			if (!updating_value_1 && dirty & /*state*/ 1) {
				updating_value_1 = true;
				knob1_changes.value = /*state*/ ctx[0].fm;
				__sv.add_flush_callback(() => updating_value_1 = false);
			}

			knob1.$set(knob1_changes);
			const patch1_changes = {};
			if (dirty & /*oscillator*/ 2) patch1_changes.output = /*oscillator*/ ctx[1];
			patch1.$set(patch1_changes);
			const patch2_changes = {};
			if (dirty & /*oscillator*/ 2) patch2_changes.output = /*oscillator*/ ctx[1];
			patch2.$set(patch2_changes);
			const patch3_changes = {};
			if (dirty & /*oscillator*/ 2) patch3_changes.output = /*oscillator*/ ctx[1];
			patch3.$set(patch3_changes);
			const patch4_changes = {};
			if (dirty & /*oscillator*/ 2) patch4_changes.output = /*oscillator*/ ctx[1];
			patch4.$set(patch4_changes);
			const patch5_changes = {};
			if (dirty & /*oscillator*/ 2) patch5_changes.output = /*oscillator*/ ctx[1];
			patch5.$set(patch5_changes);
			const patch6_changes = {};
			if (dirty & /*oscillator*/ 2) patch6_changes.output = /*oscillator*/ ctx[1];
			patch6.$set(patch6_changes);
			const patch7_changes = {};
			if (dirty & /*oscillator*/ 2) patch7_changes.output = /*oscillator*/ ctx[1];
			patch7.$set(patch7_changes);
			const patch8_changes = {};
			if (dirty & /*oscillator*/ 2) patch8_changes.output = /*oscillator*/ ctx[1];
			patch8.$set(patch8_changes);
			const patch9_changes = {};
			if (dirty & /*oscillator*/ 2) patch9_changes.output = /*oscillator*/ ctx[1];
			patch9.$set(patch9_changes);
			const patch10_changes = {};
			if (dirty & /*oscillator*/ 2) patch10_changes.output = /*oscillator*/ ctx[1];
			patch10.$set(patch10_changes);
			const patch11_changes = {};
			if (dirty & /*oscillator*/ 2) patch11_changes.output = /*oscillator*/ ctx[1];
			patch11.$set(patch11_changes);
			const patch12_changes = {};
			if (dirty & /*oscillator*/ 2) patch12_changes.output = /*oscillator*/ ctx[1];
			patch12.$set(patch12_changes);
		},
		i(local) {
			if (current) return;
			__sv.transition_in(knob0.$$.fragment, local);
			__sv.transition_in(patch0.$$.fragment, local);
			__sv.transition_in(knob1.$$.fragment, local);
			__sv.transition_in(patch1.$$.fragment, local);
			__sv.transition_in(patch2.$$.fragment, local);
			__sv.transition_in(patch3.$$.fragment, local);
			__sv.transition_in(patch4.$$.fragment, local);
			__sv.transition_in(patch5.$$.fragment, local);
			__sv.transition_in(patch6.$$.fragment, local);
			__sv.transition_in(patch7.$$.fragment, local);
			__sv.transition_in(patch8.$$.fragment, local);
			__sv.transition_in(patch9.$$.fragment, local);
			__sv.transition_in(patch10.$$.fragment, local);
			__sv.transition_in(patch11.$$.fragment, local);
			__sv.transition_in(patch12.$$.fragment, local);
			current = true;
		},
		o(local) {
			__sv.transition_out(knob0.$$.fragment, local);
			__sv.transition_out(patch0.$$.fragment, local);
			__sv.transition_out(knob1.$$.fragment, local);
			__sv.transition_out(patch1.$$.fragment, local);
			__sv.transition_out(patch2.$$.fragment, local);
			__sv.transition_out(patch3.$$.fragment, local);
			__sv.transition_out(patch4.$$.fragment, local);
			__sv.transition_out(patch5.$$.fragment, local);
			__sv.transition_out(patch6.$$.fragment, local);
			__sv.transition_out(patch7.$$.fragment, local);
			__sv.transition_out(patch8.$$.fragment, local);
			__sv.transition_out(patch9.$$.fragment, local);
			__sv.transition_out(patch10.$$.fragment, local);
			__sv.transition_out(patch11.$$.fragment, local);
			__sv.transition_out(patch12.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			__sv.destroy_component(knob0, detaching);
			if (detaching) __sv.detach(t0);
			__sv.destroy_component(patch0, detaching);
			if (detaching) __sv.detach(t1);
			__sv.destroy_component(knob1, detaching);
			if (detaching) __sv.detach(t2);
			__sv.destroy_component(patch1, detaching);
			if (detaching) __sv.detach(t3);
			__sv.destroy_component(patch2, detaching);
			if (detaching) __sv.detach(t4);
			__sv.destroy_component(patch3, detaching);
			if (detaching) __sv.detach(t5);
			__sv.destroy_component(patch4, detaching);
			if (detaching) __sv.detach(t6);
			__sv.destroy_component(patch5, detaching);
			if (detaching) __sv.detach(t7);
			__sv.destroy_component(patch6, detaching);
			if (detaching) __sv.detach(t8);
			__sv.destroy_component(patch7, detaching);
			if (detaching) __sv.detach(t9);
			__sv.destroy_component(patch8, detaching);
			if (detaching) __sv.detach(t10);
			__sv.destroy_component(patch9, detaching);
			if (detaching) __sv.detach(t11);
			__sv.destroy_component(patch10, detaching);
			if (detaching) __sv.detach(t12);
			__sv.destroy_component(patch11, detaching);
			if (detaching) __sv.detach(t13);
			__sv.destroy_component(patch12, detaching);
		}
	};
}

function create_fragment(ctx) {
	let faceplate;
	let current;

	faceplate = new Faceplate({
			props: {
				title: "Birds",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			__sv.create_component(faceplate.$$.fragment);
		},
		m(target, anchor) {
			__sv.mount_component(faceplate, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const faceplate_changes = {};

			if (dirty & /*$$scope, oscillator, state*/ 67) {
				faceplate_changes.$$scope = { dirty, ctx };
			}

			faceplate.$set(faceplate_changes);
		},
		i(local) {
			if (current) return;
			__sv.transition_in(faceplate.$$.fragment, local);
			current = true;
		},
		o(local) {
			__sv.transition_out(faceplate.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			__sv.destroy_component(faceplate, detaching);
		}
	};
}

const MIN = 40;
const MAX = 2400;

function instance($$self, $$props, $$invalidate) {
	
	let { state = { freq: 440, type: "sine", fm: 1 } } = $$props;
	const oscillator = new Tone.Oscillator(state.freq, state.type).start();
	const scale = new Tone.Scale(MIN, MAX);

	function knob0_value_binding(value) {
		state.freq = value;
		$$invalidate(0, state);
	}

	function knob1_value_binding(value) {
		state.fm = value;
		$$invalidate(0, state);
	}

	$$self.$$set = $$props => {
		if ("state" in $$props) $$invalidate(0, state = $$props.state);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*state*/ 1) {
			 $$invalidate(1, oscillator.frequency.value = state.freq, oscillator);
		}

		if ($$self.$$.dirty & /*state*/ 1) {
			 $$invalidate(1, oscillator.type = state.type, oscillator);
		}

		if ($$self.$$.dirty & /*state*/ 1) {
			 scale.min = Math.max(MIN, state.freq - state.freq * state.fm);
		}

		if ($$self.$$.dirty & /*state*/ 1) {
			 scale.max = Math.min(MAX, state.freq + (MAX - state.freq) * state.fm);
		}
	};

	return [state, oscillator, knob0_value_binding, knob1_value_binding];
}

class BIRDS extends __sv.SvelteComponent {
	constructor(options) {
		super();
		__sv.init(this, options, instance, create_fragment, __sv.safe_not_equal, { state: 0 });
	}
}

export default BIRDS;
