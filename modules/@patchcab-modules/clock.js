
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { Faceplate, Bang, onMount, Knob, Patch } from '/js/core.js';

/* src/Clock.svelte generated by Svelte v3.31.2 */

function create_default_slot(ctx) {
	let knob;
	let updating_value;
	let t0;
	let patch0;
	let t1;
	let patch1;
	let t2;
	let patch2;
	let t3;
	let patch3;
	let current;

	function knob_value_binding(value) {
		/*knob_value_binding*/ ctx[5].call(null, value);
	}

	let knob_props = {
		label: "frequency",
		x: 20,
		y: 60,
		min: 1,
		max: 10,
		precision: 2
	};

	if (/*state*/ ctx[0].freq !== void 0) {
		knob_props.value = /*state*/ ctx[0].freq;
	}

	knob = new Knob({ props: knob_props });
	__sv.binding_callbacks.push(() => __sv.bind(knob, "value", knob_value_binding));

	patch0 = new Patch({
			props: {
				label: "out",
				x: 20,
				y: 270,
				name: "gate-out-1",
				output: /*node1*/ ctx[1]
			}
		});

	patch1 = new Patch({
			props: {
				label: "1/2",
				x: 60,
				y: 270,
				name: "gate-out-2",
				output: /*node2*/ ctx[2]
			}
		});

	patch2 = new Patch({
			props: {
				label: "1/4",
				x: 20,
				y: 320,
				name: "gate-out-4",
				output: /*node4*/ ctx[3]
			}
		});

	patch3 = new Patch({
			props: {
				label: "1/8",
				x: 60,
				y: 320,
				name: "gate-out-8",
				output: /*node8*/ ctx[4]
			}
		});

	return {
		c() {
			__sv.create_component(knob.$$.fragment);
			t0 = __sv.space();
			__sv.create_component(patch0.$$.fragment);
			t1 = __sv.space();
			__sv.create_component(patch1.$$.fragment);
			t2 = __sv.space();
			__sv.create_component(patch2.$$.fragment);
			t3 = __sv.space();
			__sv.create_component(patch3.$$.fragment);
		},
		m(target, anchor) {
			__sv.mount_component(knob, target, anchor);
			__sv.insert(target, t0, anchor);
			__sv.mount_component(patch0, target, anchor);
			__sv.insert(target, t1, anchor);
			__sv.mount_component(patch1, target, anchor);
			__sv.insert(target, t2, anchor);
			__sv.mount_component(patch2, target, anchor);
			__sv.insert(target, t3, anchor);
			__sv.mount_component(patch3, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const knob_changes = {};

			if (!updating_value && dirty & /*state*/ 1) {
				updating_value = true;
				knob_changes.value = /*state*/ ctx[0].freq;
				__sv.add_flush_callback(() => updating_value = false);
			}

			knob.$set(knob_changes);
		},
		i(local) {
			if (current) return;
			__sv.transition_in(knob.$$.fragment, local);
			__sv.transition_in(patch0.$$.fragment, local);
			__sv.transition_in(patch1.$$.fragment, local);
			__sv.transition_in(patch2.$$.fragment, local);
			__sv.transition_in(patch3.$$.fragment, local);
			current = true;
		},
		o(local) {
			__sv.transition_out(knob.$$.fragment, local);
			__sv.transition_out(patch0.$$.fragment, local);
			__sv.transition_out(patch1.$$.fragment, local);
			__sv.transition_out(patch2.$$.fragment, local);
			__sv.transition_out(patch3.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			__sv.destroy_component(knob, detaching);
			if (detaching) __sv.detach(t0);
			__sv.destroy_component(patch0, detaching);
			if (detaching) __sv.detach(t1);
			__sv.destroy_component(patch1, detaching);
			if (detaching) __sv.detach(t2);
			__sv.destroy_component(patch2, detaching);
			if (detaching) __sv.detach(t3);
			__sv.destroy_component(patch3, detaching);
		}
	};
}

function create_fragment(ctx) {
	let faceplate;
	let current;

	faceplate = new Faceplate({
			props: {
				title: "CLOCK",
				color: "var(--color-3)",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			__sv.create_component(faceplate.$$.fragment);
		},
		m(target, anchor) {
			__sv.mount_component(faceplate, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const faceplate_changes = {};

			if (dirty & /*$$scope, state*/ 513) {
				faceplate_changes.$$scope = { dirty, ctx };
			}

			faceplate.$set(faceplate_changes);
		},
		i(local) {
			if (current) return;
			__sv.transition_in(faceplate.$$.fragment, local);
			current = true;
		},
		o(local) {
			__sv.transition_out(faceplate.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			__sv.destroy_component(faceplate, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { state = { freq: 2 } } = $$props;
	let tick = 0;
	const node1 = new Bang();
	const node2 = new Bang();
	const node4 = new Bang();
	const node8 = new Bang();

	const bang = time => {
		node1.bang(time, true, true);

		if (tick % 2 === 0) {
			node2.bang(time, true, true);
		}

		if (tick % 4 === 0) {
			node4.bang(time, true, true);
		}

		if (tick % 8 === 0) {
			node8.bang(time, true, true);
		}

		tick += 1;
	};

	let clock = new Tone.Clock(bang, state.freq);

	onMount(() => {
		clock.start();
	});

	function knob_value_binding(value) {
		state.freq = value;
		$$invalidate(0, state);
	}

	$$self.$$set = $$props => {
		if ("state" in $$props) $$invalidate(0, state = $$props.state);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*state*/ 1) {
			 clock.frequency.value = state.freq;
		}
	};

	return [state, node1, node2, node4, node8, knob_value_binding];
}

class Clock_1 extends __sv.SvelteComponent {
	constructor(options) {
		super();
		__sv.init(this, options, instance, create_fragment, __sv.safe_not_equal, { state: 0 });
	}
}

export default Clock_1;
