
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { Faceplate, Knob, Switch, Patch } from '/js/core.js';

/* src/OSC.svelte generated by Svelte v3.31.2 */

function create_default_slot(ctx) {
	let knob0;
	let updating_value;
	let t0;
	let button;
	let t2;
	let knob1;
	let updating_value_1;
	let t3;
	let switch0;
	let updating_value_2;
	let t4;
	let switch1;
	let updating_value_3;
	let t5;
	let switch2;
	let updating_value_4;
	let t6;
	let switch3;
	let updating_value_5;
	let t7;
	let patch0;
	let t8;
	let patch1;
	let current;
	let mounted;
	let dispose;

	function knob0_value_binding(value) {
		/*knob0_value_binding*/ ctx[5].call(null, value);
	}

	let knob0_props = {
		label: "frequency",
		x: 20,
		y: 60,
		min: MIN,
		max: MAX,
		steps: 500
	};

	if (/*state*/ ctx[0].freq !== void 0) {
		knob0_props.value = /*state*/ ctx[0].freq;
	}

	knob0 = new Knob({ props: knob0_props });
	__sv.binding_callbacks.push(() => __sv.bind(knob0, "value", knob0_value_binding));

	function knob1_value_binding(value) {
		/*knob1_value_binding*/ ctx[6].call(null, value);
	}

	let knob1_props = {
		size: "s",
		label: "fm",
		x: 27,
		y: 150,
		min: 0.01,
		max: 1,
		precision: 2
	};

	if (/*state*/ ctx[0].fm !== void 0) {
		knob1_props.value = /*state*/ ctx[0].fm;
	}

	knob1 = new Knob({ props: knob1_props });
	__sv.binding_callbacks.push(() => __sv.bind(knob1, "value", knob1_value_binding));

	function switch0_value_binding(value) {
		/*switch0_value_binding*/ ctx[7].call(null, value);
	}

	let switch0_props = { x: 20, y: 220, label: "sin", set: "sine" };

	if (/*state*/ ctx[0].type !== void 0) {
		switch0_props.value = /*state*/ ctx[0].type;
	}

	switch0 = new Switch({ props: switch0_props });
	__sv.binding_callbacks.push(() => __sv.bind(switch0, "value", switch0_value_binding));

	function switch1_value_binding(value) {
		/*switch1_value_binding*/ ctx[8].call(null, value);
	}

	let switch1_props = {
		x: 60,
		y: 220,
		label: "sqr",
		set: "square"
	};

	if (/*state*/ ctx[0].type !== void 0) {
		switch1_props.value = /*state*/ ctx[0].type;
	}

	switch1 = new Switch({ props: switch1_props });
	__sv.binding_callbacks.push(() => __sv.bind(switch1, "value", switch1_value_binding));

	function switch2_value_binding(value) {
		/*switch2_value_binding*/ ctx[9].call(null, value);
	}

	let switch2_props = {
		x: 20,
		y: 270,
		label: "tri",
		set: "triangle"
	};

	if (/*state*/ ctx[0].type !== void 0) {
		switch2_props.value = /*state*/ ctx[0].type;
	}

	switch2 = new Switch({ props: switch2_props });
	__sv.binding_callbacks.push(() => __sv.bind(switch2, "value", switch2_value_binding));

	function switch3_value_binding(value) {
		/*switch3_value_binding*/ ctx[10].call(null, value);
	}

	let switch3_props = {
		x: 60,
		y: 270,
		label: "saw",
		set: "sawtooth"
	};

	if (/*state*/ ctx[0].type !== void 0) {
		switch3_props.value = /*state*/ ctx[0].type;
	}

	switch3 = new Switch({ props: switch3_props });
	__sv.binding_callbacks.push(() => __sv.bind(switch3, "value", switch3_value_binding));

	patch0 = new Patch({
			props: {
				label: "fm",
				x: 20,
				y: 320,
				name: "signal-in",
				input: /*scale*/ ctx[2],
				onConnect: /*onConnect*/ ctx[3]
			}
		});

	patch1 = new Patch({
			props: {
				label: "out",
				x: 60,
				y: 320,
				name: "audio-out",
				output: /*oscillator*/ ctx[1]
			}
		});

	return {
		c() {
			__sv.create_component(knob0.$$.fragment);
			t0 = __sv.space();
			button = __sv.element("button");
			button.textContent = "dbg";
			t2 = __sv.space();
			__sv.create_component(knob1.$$.fragment);
			t3 = __sv.space();
			__sv.create_component(switch0.$$.fragment);
			t4 = __sv.space();
			__sv.create_component(switch1.$$.fragment);
			t5 = __sv.space();
			__sv.create_component(switch2.$$.fragment);
			t6 = __sv.space();
			__sv.create_component(switch3.$$.fragment);
			t7 = __sv.space();
			__sv.create_component(patch0.$$.fragment);
			t8 = __sv.space();
			__sv.create_component(patch1.$$.fragment);
			__sv.set_style(button, "color", "#111");
			__sv.set_style(button, "background-color", "#0fa");
			__sv.set_style(button, "border-radius", "20px");
		},
		m(target, anchor) {
			__sv.mount_component(knob0, target, anchor);
			__sv.insert(target, t0, anchor);
			__sv.insert(target, button, anchor);
			__sv.insert(target, t2, anchor);
			__sv.mount_component(knob1, target, anchor);
			__sv.insert(target, t3, anchor);
			__sv.mount_component(switch0, target, anchor);
			__sv.insert(target, t4, anchor);
			__sv.mount_component(switch1, target, anchor);
			__sv.insert(target, t5, anchor);
			__sv.mount_component(switch2, target, anchor);
			__sv.insert(target, t6, anchor);
			__sv.mount_component(switch3, target, anchor);
			__sv.insert(target, t7, anchor);
			__sv.mount_component(patch0, target, anchor);
			__sv.insert(target, t8, anchor);
			__sv.mount_component(patch1, target, anchor);
			current = true;

			if (!mounted) {
				dispose = __sv.listen(button, "click", /*test*/ ctx[4]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			const knob0_changes = {};

			if (!updating_value && dirty & /*state*/ 1) {
				updating_value = true;
				knob0_changes.value = /*state*/ ctx[0].freq;
				__sv.add_flush_callback(() => updating_value = false);
			}

			knob0.$set(knob0_changes);
			const knob1_changes = {};

			if (!updating_value_1 && dirty & /*state*/ 1) {
				updating_value_1 = true;
				knob1_changes.value = /*state*/ ctx[0].fm;
				__sv.add_flush_callback(() => updating_value_1 = false);
			}

			knob1.$set(knob1_changes);
			const switch0_changes = {};

			if (!updating_value_2 && dirty & /*state*/ 1) {
				updating_value_2 = true;
				switch0_changes.value = /*state*/ ctx[0].type;
				__sv.add_flush_callback(() => updating_value_2 = false);
			}

			switch0.$set(switch0_changes);
			const switch1_changes = {};

			if (!updating_value_3 && dirty & /*state*/ 1) {
				updating_value_3 = true;
				switch1_changes.value = /*state*/ ctx[0].type;
				__sv.add_flush_callback(() => updating_value_3 = false);
			}

			switch1.$set(switch1_changes);
			const switch2_changes = {};

			if (!updating_value_4 && dirty & /*state*/ 1) {
				updating_value_4 = true;
				switch2_changes.value = /*state*/ ctx[0].type;
				__sv.add_flush_callback(() => updating_value_4 = false);
			}

			switch2.$set(switch2_changes);
			const switch3_changes = {};

			if (!updating_value_5 && dirty & /*state*/ 1) {
				updating_value_5 = true;
				switch3_changes.value = /*state*/ ctx[0].type;
				__sv.add_flush_callback(() => updating_value_5 = false);
			}

			switch3.$set(switch3_changes);
			const patch0_changes = {};
			if (dirty & /*scale*/ 4) patch0_changes.input = /*scale*/ ctx[2];
			patch0.$set(patch0_changes);
			const patch1_changes = {};
			if (dirty & /*oscillator*/ 2) patch1_changes.output = /*oscillator*/ ctx[1];
			patch1.$set(patch1_changes);
		},
		i(local) {
			if (current) return;
			__sv.transition_in(knob0.$$.fragment, local);
			__sv.transition_in(knob1.$$.fragment, local);
			__sv.transition_in(switch0.$$.fragment, local);
			__sv.transition_in(switch1.$$.fragment, local);
			__sv.transition_in(switch2.$$.fragment, local);
			__sv.transition_in(switch3.$$.fragment, local);
			__sv.transition_in(patch0.$$.fragment, local);
			__sv.transition_in(patch1.$$.fragment, local);
			current = true;
		},
		o(local) {
			__sv.transition_out(knob0.$$.fragment, local);
			__sv.transition_out(knob1.$$.fragment, local);
			__sv.transition_out(switch0.$$.fragment, local);
			__sv.transition_out(switch1.$$.fragment, local);
			__sv.transition_out(switch2.$$.fragment, local);
			__sv.transition_out(switch3.$$.fragment, local);
			__sv.transition_out(patch0.$$.fragment, local);
			__sv.transition_out(patch1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			__sv.destroy_component(knob0, detaching);
			if (detaching) __sv.detach(t0);
			if (detaching) __sv.detach(button);
			if (detaching) __sv.detach(t2);
			__sv.destroy_component(knob1, detaching);
			if (detaching) __sv.detach(t3);
			__sv.destroy_component(switch0, detaching);
			if (detaching) __sv.detach(t4);
			__sv.destroy_component(switch1, detaching);
			if (detaching) __sv.detach(t5);
			__sv.destroy_component(switch2, detaching);
			if (detaching) __sv.detach(t6);
			__sv.destroy_component(switch3, detaching);
			if (detaching) __sv.detach(t7);
			__sv.destroy_component(patch0, detaching);
			if (detaching) __sv.detach(t8);
			__sv.destroy_component(patch1, detaching);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let faceplate;
	let current;

	faceplate = new Faceplate({
			props: {
				title: "OSC",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			__sv.create_component(faceplate.$$.fragment);
		},
		m(target, anchor) {
			__sv.mount_component(faceplate, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const faceplate_changes = {};

			if (dirty & /*$$scope, oscillator, scale, state*/ 2055) {
				faceplate_changes.$$scope = { dirty, ctx };
			}

			faceplate.$set(faceplate_changes);
		},
		i(local) {
			if (current) return;
			__sv.transition_in(faceplate.$$.fragment, local);
			current = true;
		},
		o(local) {
			__sv.transition_out(faceplate.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			__sv.destroy_component(faceplate, detaching);
		}
	};
}

const MIN = 40;
const MAX = 2400;

function instance($$self, $$props, $$invalidate) {
	
	let { state = { freq: 440, type: "sine", fm: 1 } } = $$props;
	const oscillator = new Tone.Oscillator(state.freq, state.type).start();
	const scale = new Tone.Scale(MIN, MAX);

	const onConnect = nodes => {
		// console.log(scale)
		if (nodes) {
			scale.connect(oscillator.frequency);
		} else {
			scale.disconnect(oscillator.frequency);
			$$invalidate(1, oscillator.frequency.overridden = false, oscillator);
			$$invalidate(1, oscillator.frequency.value = state.freq, oscillator);
		}
	};

	// let patch
	const test = e => {
		
	}; // console.log(scale)

	function knob0_value_binding(value) {
		state.freq = value;
		$$invalidate(0, state);
	}

	function knob1_value_binding(value) {
		state.fm = value;
		$$invalidate(0, state);
	}

	function switch0_value_binding(value) {
		state.type = value;
		$$invalidate(0, state);
	}

	function switch1_value_binding(value) {
		state.type = value;
		$$invalidate(0, state);
	}

	function switch2_value_binding(value) {
		state.type = value;
		$$invalidate(0, state);
	}

	function switch3_value_binding(value) {
		state.type = value;
		$$invalidate(0, state);
	}

	$$self.$$set = $$props => {
		if ("state" in $$props) $$invalidate(0, state = $$props.state);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*state*/ 1) {
			// let node = new Waveform(512);
			// let node = new Signal(100)
			 $$invalidate(1, oscillator.frequency.value = state.freq, oscillator);
		}

		if ($$self.$$.dirty & /*state*/ 1) {
			 $$invalidate(1, oscillator.type = state.type, oscillator);
		}

		if ($$self.$$.dirty & /*state*/ 1) {
			 $$invalidate(2, scale.min = Math.max(MIN, state.freq - state.freq * state.fm), scale);
		}

		if ($$self.$$.dirty & /*state*/ 1) {
			 $$invalidate(2, scale.max = Math.min(MAX, state.freq + (MAX - state.freq) * state.fm), scale);
		}
	};

	return [
		state,
		oscillator,
		scale,
		onConnect,
		test,
		knob0_value_binding,
		knob1_value_binding,
		switch0_value_binding,
		switch1_value_binding,
		switch2_value_binding,
		switch3_value_binding
	];
}

class OSC extends __sv.SvelteComponent {
	constructor(options) {
		super();
		__sv.init(this, options, instance, create_fragment, __sv.safe_not_equal, { state: 0 });
	}
}

export default OSC;
