
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { Faceplate, Knob, Patch } from '/js/core.js';

/* src/REVRB.svelte generated by Svelte v3.31.2 */

function create_default_slot(ctx) {
	let knob;
	let updating_value;
	let t0;
	let patch0;
	let t1;
	let patch1;
	let current;

	function knob_value_binding(value) {
		/*knob_value_binding*/ ctx[2].call(null, value);
	}

	let knob_props = {
		label: "decay",
		x: 20,
		y: 60,
		min: MIN,
		max: MAX,
		precision: 2
	};

	if (/*state*/ ctx[0].decay !== void 0) {
		knob_props.value = /*state*/ ctx[0].decay;
	}

	knob = new Knob({ props: knob_props });
	__sv.binding_callbacks.push(() => __sv.bind(knob, "value", knob_value_binding));

	patch0 = new Patch({
			props: {
				label: "in",
				x: 20,
				y: 320,
				name: "audio-in",
				input: /*reverb*/ ctx[1]
			}
		});

	patch1 = new Patch({
			props: {
				label: "out",
				x: 60,
				y: 320,
				name: "audio-out",
				output: /*reverb*/ ctx[1]
			}
		});

	return {
		c() {
			__sv.create_component(knob.$$.fragment);
			t0 = __sv.space();
			__sv.create_component(patch0.$$.fragment);
			t1 = __sv.space();
			__sv.create_component(patch1.$$.fragment);
		},
		m(target, anchor) {
			__sv.mount_component(knob, target, anchor);
			__sv.insert(target, t0, anchor);
			__sv.mount_component(patch0, target, anchor);
			__sv.insert(target, t1, anchor);
			__sv.mount_component(patch1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const knob_changes = {};

			if (!updating_value && dirty & /*state*/ 1) {
				updating_value = true;
				knob_changes.value = /*state*/ ctx[0].decay;
				__sv.add_flush_callback(() => updating_value = false);
			}

			knob.$set(knob_changes);
			const patch0_changes = {};
			if (dirty & /*reverb*/ 2) patch0_changes.input = /*reverb*/ ctx[1];
			patch0.$set(patch0_changes);
			const patch1_changes = {};
			if (dirty & /*reverb*/ 2) patch1_changes.output = /*reverb*/ ctx[1];
			patch1.$set(patch1_changes);
		},
		i(local) {
			if (current) return;
			__sv.transition_in(knob.$$.fragment, local);
			__sv.transition_in(patch0.$$.fragment, local);
			__sv.transition_in(patch1.$$.fragment, local);
			current = true;
		},
		o(local) {
			__sv.transition_out(knob.$$.fragment, local);
			__sv.transition_out(patch0.$$.fragment, local);
			__sv.transition_out(patch1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			__sv.destroy_component(knob, detaching);
			if (detaching) __sv.detach(t0);
			__sv.destroy_component(patch0, detaching);
			if (detaching) __sv.detach(t1);
			__sv.destroy_component(patch1, detaching);
		}
	};
}

function create_fragment(ctx) {
	let faceplate;
	let current;

	faceplate = new Faceplate({
			props: {
				title: "REVRB",
				color: "var(--color-2)",
				light: true,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			__sv.create_component(faceplate.$$.fragment);
		},
		m(target, anchor) {
			__sv.mount_component(faceplate, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const faceplate_changes = {};

			if (dirty & /*$$scope, reverb, state*/ 11) {
				faceplate_changes.$$scope = { dirty, ctx };
			}

			faceplate.$set(faceplate_changes);
		},
		i(local) {
			if (current) return;
			__sv.transition_in(faceplate.$$.fragment, local);
			current = true;
		},
		o(local) {
			__sv.transition_out(faceplate.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			__sv.destroy_component(faceplate, detaching);
		}
	};
}

const MIN = 0.01;
const MAX = 10;

function instance($$self, $$props, $$invalidate) {
	let { state = { decay: 1.15 } } = $$props;
	const reverb = new Tone.Reverb(state.decay);

	function knob_value_binding(value) {
		state.decay = value;
		$$invalidate(0, state);
	}

	$$self.$$set = $$props => {
		if ("state" in $$props) $$invalidate(0, state = $$props.state);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*state*/ 1) {
			 $$invalidate(1, reverb.decay = state.decay, reverb);
		}
	};

	return [state, reverb, knob_value_binding];
}

class REVRB extends __sv.SvelteComponent {
	constructor(options) {
		super();
		__sv.init(this, options, instance, create_fragment, __sv.safe_not_equal, { state: 0 });
	}
}

export default REVRB;
